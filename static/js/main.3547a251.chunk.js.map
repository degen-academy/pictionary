{"version":3,"sources":["components/lobby/component.tsx","App.tsx","serviceWorker.js","index.js"],"names":["firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","OutlinedTextFields","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","displayName","lobbyName","handleChange","name","event","setState","defineProperty","target","value","login","firebase","auth","signInAnonymously","then","userCredential","user","updateProfile","catch","error","console","log","initializeApp","signOut","onAuthStateChanged","concat","react_default","a","createElement","noValidate","autoComplete","index_es","id","label","defaultValue","margin","variant","onChange","color","onClick","React","Component","App","className","rel","href","Typography_default","component","gutterBottom","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qUAIMA,EAAiB,CACrBC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,iBAoFNC,cA3Eb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM,MANRI,MAAQ,CACNC,YAAa,MACbC,UAAW,aAGCT,EAiDNU,aAAe,SAACC,GAAD,OAAkB,SAACC,GAGxCZ,EAAKa,SAALZ,OAAAa,EAAA,EAAAb,CAAA,GACGU,EAAOC,EAAMG,OAAOC,UArDXhB,EAyDNiB,MAAQ,SAACL,GACfM,IACGC,OACAC,oBACAC,KAAK,SAAAC,GACJ,IAAMC,EAAOD,EAAeC,KACxBA,GACFA,EAAKC,cAAc,CACjBhB,YAAaR,EAAKO,MAAMC,gBAI7BiB,MAAM,SAASC,GACdC,QAAQC,IAAIF,MAlEhBR,IAASW,cAAcrC,GAGvB0B,IAASC,OAAOW,UAChBZ,IAASC,OAAOY,mBAAmB,SAAAR,GAC7BA,GACFI,QAAQC,IAAR,WAAAI,OACahC,EAAKO,MAAME,UADxB,UAAAuB,OAC0ChC,EAAKO,MAAMC,YADrD,QAVQR,sFAkBZkB,IAASC,OAAOW,2CAIhB,OACEG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,YAAU,EAACC,aAAa,OAC5BJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACEC,GAAG,wBACHC,MAAM,eACNC,aAActC,KAAKI,MAAMC,YACzBkC,OAAO,SACPC,QAAQ,WACRC,SAAUzC,KAAKO,aAAa,iBAE9BuB,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACEC,GAAG,wBACHC,MAAM,aACNC,aAActC,KAAKI,MAAME,UACzBiC,OAAO,SACPC,QAAQ,WACRC,SAAUzC,KAAKO,aAAa,gBAGhCuB,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQK,QAAQ,YAAYE,MAAM,UAAUC,QAAS3C,KAAKc,OAA1D,kBAhDyB8B,IAAMC,WCYxBC,2LAhBX,OACEhB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,OACbjB,EAAAC,EAAAC,cAAA,QACEgB,IAAI,aACJC,KAAK,+DAEPnB,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,CAAYoB,UAAU,KAAKX,QAAQ,KAAKY,cAAY,GAApD,cAIAtB,EAAAC,EAAAC,cAACmB,EAAD,cAZUN,cCKEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,KAAK,SAAAgD,GACjCA,EAAaC","file":"static/js/main.3547a251.chunk.js","sourcesContent":["import React from \"react\";\nimport { TextField, Button } from \"@material-ui/core\";\nimport firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC8GlZSkhT_-jVM7pv_5IulaL4PUWfw8ys\",\n  authDomain: \"pictionary-c2ea2.firebaseapp.com\",\n  databaseURL: \"https://pictionary-c2ea2.firebaseio.com\",\n  projectId: \"pictionary-c2ea2\",\n  storageBucket: \"pictionary-c2ea2.appspot.com\",\n  messagingSenderId: \"1067811636183\"\n};\n\nclass OutlinedTextFields extends React.Component {\n  state = {\n    displayName: \"foo\",\n    lobbyName: \"new lobby\"\n  };\n\n  constructor() {\n    super({});\n\n    // TODO: firebase stuff should be in its own component, probably a react hook wrapping children components\n    firebase.initializeApp(firebaseConfig);\n\n    // sign out of any previous sessions\n    firebase.auth().signOut();\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        console.log(\n          `joined \"${this.state.lobbyName}\" as \"${this.state.displayName}\"`\n        );\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    firebase.auth().signOut();\n  }\n\n  render() {\n    return (\n      <div>\n        <form noValidate autoComplete=\"off\">\n          <TextField\n            id=\"outlined-uncontrolled\"\n            label=\"Display Name\"\n            defaultValue={this.state.displayName}\n            margin=\"normal\"\n            variant=\"outlined\"\n            onChange={this.handleChange(\"displayName\")}\n          />\n          <TextField\n            id=\"outlined-uncontrolled\"\n            label=\"Lobby Name\"\n            defaultValue={this.state.lobbyName}\n            margin=\"normal\"\n            variant=\"outlined\"\n            onChange={this.handleChange(\"lobbyName\")}\n          />\n        </form>\n        <Button variant=\"contained\" color=\"primary\" onClick={this.login}>\n          Log in\n        </Button>\n      </div>\n    );\n  }\n\n  private handleChange = (name: string) => (event: {\n    target: { value: any };\n  }) => {\n    this.setState({\n      [name]: event.target.value\n    });\n  };\n\n  private login = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    firebase\n      .auth()\n      .signInAnonymously()\n      .then(userCredential => {\n        const user = userCredential.user;\n        if (user) {\n          user.updateProfile({\n            displayName: this.state.displayName\n          });\n        }\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n  };\n}\n\nexport default OutlinedTextFields;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport OutlinedTextFields from \"./components/lobby/component\";\nimport \"firebase/auth\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <link\n          rel=\"stylesheet\"\n          href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500\"\n        />\n        <Typography component=\"h2\" variant=\"h2\" gutterBottom>\n          Pictionary\n        </Typography>\n\n        <OutlinedTextFields />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}