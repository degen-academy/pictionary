{"version":3,"sources":["components/game/component.tsx","components/login/component.tsx","App.tsx","serviceWorker.js","index.js"],"names":["GameLobby","currentUser","firebase","auth","react_default","a","createElement","this","props","match","params","gameID","displayName","index_es","variant","color","React","Component","Login","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","handleChange","name","event","setState","defineProperty","target","value","login","signInAnonymously","then","userCredential","user","updateProfile","history","push","concat","console","log","signOut","onAuthStateChanged","noValidate","autoComplete","id","label","defaultValue","margin","onChange","onClick","CircularProgress_default","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","className","rel","href","Typography_default","component","gutterBottom","react_router_dom","react_router","exact","path","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d5b04fe6.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport firebase from \"firebase\";\nimport { RouteComponentProps } from \"react-router\";\n\ninterface MatchParams {\n  gameID: string;\n}\n\ninterface Props extends RouteComponentProps<MatchParams> {\n}\n\nclass GameLobby extends React.Component<Props> {\n    render() {\n        const currentUser = firebase.auth().currentUser;\n        if (!currentUser) {\n            return <div>\"please log in\"</div>\n        }\n        return (\n        <div>\n            <h1>Game ID: {this.props.match.params.gameID}</h1>\n            <h2>Joined the lobby as \"{currentUser.displayName}\"</h2>\n            <Button variant=\"contained\" color=\"primary\">\n                Start Game\n            </Button>\n        </div>\n        );\n    }\n}\n\nexport default GameLobby;\n","import React from \"react\";\nimport { TextField, Button } from \"@material-ui/core\";\nimport firebase from \"firebase\";\nimport { RouteComponentProps } from \"react-router\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\ninterface MatchParams {\n  name: string;\n}\n\ninterface Props extends RouteComponentProps<MatchParams> {\n  gameID: string;\n}\nclass Login extends React.Component<Props> {\n  state = {\n    displayName: \"your name\",\n    gameID: \"new lobby\",\n    isLoading: false,\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    console.log(this.props.match.params);\n    // sign out of any previous sessions\n    firebase.auth().signOut();\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        console.log(\n          `joined \"${this.state.gameID}\" as \"${this.state.displayName}\"`\n        );\n      }\n    });\n  }\n\n\n  render() {\n    return (\n      <div>\n        <form noValidate autoComplete=\"off\">\n          <TextField\n            id=\"outlined-uncontrolled\"\n            label=\"Display Name\"\n            defaultValue={this.state.displayName}\n            margin=\"normal\"\n            variant=\"outlined\"\n            onChange={this.handleChange(\"displayName\")}\n          />\n          <TextField\n            id=\"outlined-uncontrolled\"\n            label=\"Lobby Name\"\n            defaultValue={this.state.gameID}\n            margin=\"normal\"\n            variant=\"outlined\"\n            onChange={this.handleChange(\"lobbyName\")}\n          />\n        </form>\n        <Button variant=\"contained\" color=\"primary\" onClick={this.login}>\n          Join Game\n        </Button>\n        <div>\n          {this.state.isLoading ? <CircularProgress /> : null}\n        </div>\n      </div>\n    );\n  }\n\n  private handleChange = (name: string) => (event: {\n    target: { value: any };\n  }) => {\n    this.setState({\n      [name]: event.target.value\n    });\n  };\n\n  private login = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    this.setState({isLoading: true});\n    firebase\n      .auth()\n      .signInAnonymously()\n      .then(userCredential => {\n        const user = userCredential.user;\n        if (user) {\n          user.updateProfile({\n            displayName: this.state.displayName\n          })\n          .then(() => {\n            this.setState({isLoading: false});\n            // redirect user to game lobby URL after login succeeds\n            this.props.history.push(`/${this.state.gameID}`)\n          });\n        }\n      });\n  };\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Typography from \"@material-ui/core/Typography\";\nimport GameLobby from \"./components/game/component\";\nimport Login from \"./components/login/component\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport * as firebase from 'firebase';\n\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC8GlZSkhT_-jVM7pv_5IulaL4PUWfw8ys\",\n  authDomain: \"pictionary-c2ea2.firebaseapp.com\",\n  databaseURL: \"https://pictionary-c2ea2.firebaseio.com\",\n  projectId: \"pictionary-c2ea2\",\n  storageBucket: \"pictionary-c2ea2.appspot.com\",\n  messagingSenderId: \"1067811636183\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <link\n          rel=\"stylesheet\"\n          href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500\"\n        />\n        <Typography component=\"h2\" variant=\"h2\" gutterBottom>\n          Pictionary\n        </Typography>\n\n        <Router>\n          <Route exact path=\"/\" component={Login} />\n          <Route path=\"/:gameID\" component={GameLobby} />\n        </Router>\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}