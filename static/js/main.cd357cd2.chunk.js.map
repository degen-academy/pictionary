{"version":3,"sources":["components/game/component.tsx","components/login/component.tsx","App.tsx","serviceWorker.js","index.js"],"names":["GameLobby","currentUser","firebase","auth","message","react_default","a","createElement","displayName","this","props","match","params","gameID","index_es","variant","color","React","Component","Login","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","handleChange","name","event","setState","defineProperty","target","value","login","signInAnonymously","then","userCredential","user","updateProfile","replace","history","push","concat","console","log","signOut","onAuthStateChanged","noValidate","autoComplete","id","label","defaultValue","margin","onChange","onClick","CircularProgress_default","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","className","rel","href","Typography_default","component","gutterBottom","react_router_dom","basename","process","react_router","exact","path","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cd357cd2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport firebase from \"firebase\";\r\nimport { RouteComponentProps } from \"react-router\";\r\n\r\n// hard-coded players\r\nconst players = [\r\n    {\r\n        displayName: \"hello\"\r\n    },\r\n    {\r\n        displayName: \"mynameis\"\r\n    }\r\n]\r\n\r\ninterface MatchParams {\r\n  gameID: string;\r\n}\r\n\r\ninterface Props extends RouteComponentProps<MatchParams> {\r\n}\r\n\r\nclass GameLobby extends React.Component<Props> {\r\n    render() {\r\n        const currentUser = firebase.auth().currentUser;\r\n        var message = <div>\"please log in\"</div>;\r\n        if (currentUser) {\r\n            message = <h2>Joined the lobby as \"{currentUser.displayName}\"</h2>;\r\n        }\r\n\r\n        return (\r\n        <div>\r\n            <h1>Game ID: {this.props.match.params.gameID}</h1>\r\n            {message}\r\n            <Button variant=\"contained\" color=\"primary\">\r\n                Start Game\r\n            </Button>\r\n\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameLobby;\r\n","import React from \"react\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport firebase from \"firebase\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\ninterface MatchParams {\r\n  name: string;\r\n}\r\n\r\ninterface Props extends RouteComponentProps<MatchParams> {\r\n  gameID: string;\r\n}\r\nclass Login extends React.Component<Props> {\r\n  state = {\r\n    displayName: \"kiminonawa\",\r\n    gameID: \"new lobby\",\r\n    isLoading: false,\r\n  };\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    console.log(this.props.match.params);\r\n    // sign out of any previous sessions\r\n    firebase.auth().signOut();\r\n    firebase.auth().onAuthStateChanged(user => {\r\n      if (user) {\r\n        console.log(\r\n          `joined \"${this.state.gameID}\" as \"${this.state.displayName}\"`\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form noValidate autoComplete=\"off\">\r\n          <TextField\r\n            id=\"outlined-uncontrolled\"\r\n            label=\"Display Name\"\r\n            defaultValue={this.state.displayName}\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n            onChange={this.handleChange(\"displayName\")}\r\n          />\r\n          <TextField\r\n            id=\"outlined-uncontrolled\"\r\n            label=\"Lobby Name\"\r\n            defaultValue={this.state.gameID}\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n            onChange={this.handleChange(\"lobbyName\")}\r\n          />\r\n        </form>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={this.login}>\r\n          Join Game\r\n        </Button>\r\n        <div>\r\n          {this.state.isLoading ? <CircularProgress /> : null}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private handleChange = (name: string) => (event: {\r\n    target: { value: any };\r\n  }) => {\r\n    this.setState({\r\n      [name]: event.target.value\r\n    });\r\n  };\r\n\r\n  private login = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n    this.setState({isLoading: true});\r\n    firebase\r\n      .auth()\r\n      .signInAnonymously()\r\n      .then(userCredential => {\r\n        const user = userCredential.user;\r\n        if (user) {\r\n          user.updateProfile({\r\n            displayName: this.state.displayName\r\n          })\r\n          .then(() => {\r\n            this.setState({isLoading: false});\r\n            var gameID = this.state.gameID.replace(\" \", \"-\");\r\n            // redirect user to game lobby URL after login succeeds\r\n            this.props.history.push(`/${gameID}`)\r\n          });\r\n        }\r\n      });\r\n  };\r\n}\r\n\r\nexport default Login;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport GameLobby from \"./components/game/component\";\r\nimport Login from \"./components/login/component\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport * as firebase from 'firebase';\r\n\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyC8GlZSkhT_-jVM7pv_5IulaL4PUWfw8ys\",\r\n  authDomain: \"pictionary-c2ea2.firebaseapp.com\",\r\n  databaseURL: \"https://pictionary-c2ea2.firebaseio.com\",\r\n  projectId: \"pictionary-c2ea2\",\r\n  storageBucket: \"pictionary-c2ea2.appspot.com\",\r\n  messagingSenderId: \"1067811636183\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <link\r\n          rel=\"stylesheet\"\r\n          href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500\"\r\n        />\r\n        <Typography component=\"h2\" variant=\"h2\" gutterBottom>\r\n          Pictionary\r\n        </Typography>\r\n\r\n        <Router basename={process.env.PUBLIC_URL}>\r\n          <Route exact path=\"/\" component={Login} />\r\n          <Route path=\"/:gameID\" component={GameLobby} />\r\n        </Router>\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}