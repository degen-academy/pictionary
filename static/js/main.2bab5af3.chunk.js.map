{"version":3,"sources":["api/gameAPI.ts","components/game/component.tsx","components/login/component.tsx","App.tsx","serviceWorker.js","index.js"],"names":["GameAPI","props","_this","this","Object","classCallCheck","gameID","displayName","socket","onOpen","event","message","action","game_id","name","send","JSON","stringify","WebSocket","onopen","onmessage","onMessage","payload","GameLobby","possibleConstructorReturn","getPrototypeOf","call","gameAPI","chatInput","handleKeyDown","keyCode","sendMessage","current","text","value","length","onReceiveMessage","console","log","data","_parsed","parse","setState","prev","messageHistory","concat","toConsumableArray","state","location","match","params","React","createRef","react_default","a","createElement","h","map","d","index_es","inputRef","id","label","margin","variant","onKeyDown","color","onClick","Component","Login","isLoading","handleChange","defineProperty","target","noValidate","autoComplete","defaultValue","onChange","react_router_dom","to","pathname","replace","CircularProgress_default","App","className","rel","href","Typography_default","component","gutterBottom","basename","process","react_router","exact","path","Boolean","window","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2bab5af3.chunk.js","sourcesContent":["const wsURL = 'wss://auxhu82pyl.execute-api.us-west-2.amazonaws.com/dev';\n\ninterface Props {\n    gameID: string;\n    displayName: string;\n    onMessage: (ev: MessageEvent) => void\n}\n\nclass GameAPI {\n    gameID: string;\n    displayName: string;\n    socket: WebSocket;\n    constructor(props:Props) {\n        this.gameID = props.gameID;\n        this.displayName = props.displayName;\n\n        const socket = new WebSocket('wss://auxhu82pyl.execute-api.us-west-2.amazonaws.com/dev');\n\n        socket.onopen = this.onOpen;\n        socket.onmessage = props.onMessage;\n\n        this.socket = socket;\n    }\n\n    sendMessage(message: string) {\n        const payload = {\n            action: \"send_message\",\n            message: message,\n            game_id: this.gameID,\n            name: this.displayName\n        }\n        this.socket.send(JSON.stringify(payload))\n    }\n\n    private onOpen = (event: Event) => {\n        const message = {\n            action: \"join\",\n            game_id: this.gameID,\n            name: this.displayName,\n        }\n        this.socket.send(JSON.stringify(message));\n    }\n}\n\n\nexport default GameAPI;","import React from \"react\";\nimport { Button, TextField } from \"@material-ui/core\";\nimport { RouteComponentProps } from \"react-router\";\nimport GameAPI from \"../../api/gameAPI\";\n\ninterface MatchParams {\n  gameID: string;\n}\n\ninterface Props extends RouteComponentProps<MatchParams> {\n    displayName: string;\n}\n\ninterface State {\n    displayName: string;\n    messageHistory: chatLine[];\n}\n\ninterface chatLine {\n    name: string;\n    message: string;\n}\n\nclass GameLobby extends React.Component<Props, State> {\n\n    gameAPI: GameAPI;\n    chatInput: React.RefObject<HTMLInputElement>;\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            displayName: this.props.location.state,\n            messageHistory: []\n        }\n        this.gameAPI = new GameAPI({\n            gameID: this.props.match.params.gameID,\n            displayName: this.state.displayName,\n            onMessage: this.onReceiveMessage,\n        });\n        this.chatInput = React.createRef<HTMLInputElement>();\n    }\n\n    render() {\n        const displayName = this.state.displayName;\n        console.log(displayName)\n        if (!displayName) {\n            return <h2>Please log in</h2>\n        }\n\n        const message = <h2>Joined the lobby as \"{displayName}\"</h2>;\n        console.log(this.state.messageHistory)\n        const h = this.state.messageHistory.map(d => {\n           return <div><span>{d.name}:</span>  {d.message}</div>\n        })\n        console.log(h)\n\n        return (\n        <div>\n            <div>\n            <h1>Game ID: {this.props.match.params.gameID}</h1>\n            {message}\n\n            </div>\n            <br />\n            <div>\n            <TextField\n                inputRef={this.chatInput}\n                id=\"chat-input\"\n                label=\"chat\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                onKeyDown={this.handleKeyDown}\n            />\n            <Button variant=\"contained\" color=\"primary\" onClick={this.sendMessage}>\n                Send\n            </Button>\n            {h}\n\n            </div>\n\n        </div>\n        );\n    }\n\n    private handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        // enter key\n        if (event.keyCode === 13) {\n            this.sendMessage();\n        }\n\n    }\n\n    private sendMessage = () => {\n        if (!this.chatInput.current) {\n            return;\n        }\n        const text = this.chatInput.current.value;\n        if (text.length > 0) {\n            this.gameAPI.sendMessage(text);\n            this.chatInput.current.value = '';\n        }\n    }\n\n\n    private onReceiveMessage = (event: MessageEvent) => {\n        console.log(event.data);\n        const _parsed = JSON.parse(event.data);\n        const {name, message} = _parsed;\n        this.setState((prev:State) => ({\n            messageHistory: [...prev.messageHistory, {name, message}]\n        }))\n    }\n}\n\nexport default GameLobby;\n","import React from \"react\";\nimport { TextField, Button } from \"@material-ui/core\";\nimport { RouteComponentProps } from \"react-router\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { Link } from \"react-router-dom\";\n\ninterface MatchParams {\n  name: string;\n}\n\ninterface Props extends RouteComponentProps<MatchParams> {\n  gameID: string;\n}\nclass Login extends React.Component<Props> {\n  state = {\n    displayName: \"kiminonawa\",\n    gameID: \"new lobby\",\n    isLoading: false,\n  };\n\n  render() {\n    return (\n      <div>\n        <form noValidate autoComplete=\"off\">\n          <TextField\n            id=\"outlined-uncontrolled\"\n            label=\"Display Name\"\n            defaultValue={this.state.displayName}\n            margin=\"normal\"\n            variant=\"outlined\"\n            onChange={this.handleChange(\"displayName\")}\n          />\n          <TextField\n            id=\"outlined-uncontrolled\"\n            label=\"Lobby Name\"\n            defaultValue={this.state.gameID}\n            margin=\"normal\"\n            variant=\"outlined\"\n            onChange={this.handleChange(\"lobbyName\")}\n          />\n        </form>\n        <Link to={{\n          pathname: `/${this.state.gameID.replace(\" \", \"-\")}`,\n          state: this.state.displayName,\n        }}>\n          <Button variant=\"contained\" color=\"primary\">\n            Join Game\n          </Button>\n        </Link>\n\n        <div>\n          {this.state.isLoading ? <CircularProgress /> : null}\n        </div>\n      </div>\n    );\n  }\n\n  private handleChange = (name: string) => (event: {\n    target: { value: any };\n  }) => {\n    this.setState({\n      [name]: event.target.value\n    });\n  };\n\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Typography from \"@material-ui/core/Typography\";\nimport GameLobby from \"./components/game/component\";\nimport Login from \"./components/login/component\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <link\n          rel=\"stylesheet\"\n          href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500\"\n        />\n        <Typography component=\"h2\" variant=\"h2\" gutterBottom>\n          Pictionary\n        </Typography>\n\n        <Router basename={process.env.PUBLIC_URL}>\n          <Route exact path=\"/\" component={Login} />\n          <Route path=\"/:gameID\" component={GameLobby} />\n        </Router>\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}